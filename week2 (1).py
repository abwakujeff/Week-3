# -*- coding: utf-8 -*-
"""WEEK2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovHnVeOxfQ8LY6xBtJQspf36Suz9Ki7b

**Question 1: Simulating a 1D Random Walk with Step Bias**  
A particle moves along a one-dimensional line (1D). At each time step, it can either move:   
 * +1 step to the right with probability p, or
 * -1 step to the left with probability 1−p   
Suppose p=0.85 (i.e., a bias to the right).

**Instructions:**  
1. Write a Python program to simulate a 1D random walk with 1000 steps where:  o The starting position is 0.     
o Each step has a probability of p=0.85 to move right and 1−p=0.15 to move left.
2. Plot the position vs time graph (time on x-axis, position on y-axis).
3. Run the simulation five times and overlay all five random walks in the same graph.
4. Calculate and interpret:  
o The final position of the particle after 1000 steps.
o The mean and standard deviation of the final position across five simulations.
"""

import numpy as np
import matplotlib.pyplot as plt

def simulate_1d_random_walk(n_steps=1000, p=0.85):
    # Each step: +1 with probability p, -1 with probability 1-p
    steps = np.where(np.random.rand(n_steps) < p, 1, -1)
    positions = np.cumsum(steps)
    positions = np.insert(positions, 0, 0)  # starting at position 0
    return positions

# Run the simulation five times
n_simulations = 5
n_steps = 1000
final_positions = []

plt.figure(figsize=(10, 6))
for i in range(n_simulations):
    positions = simulate_1d_random_walk(n_steps=n_steps, p=0.85)
    final_positions.append(positions[-1])
    plt.plot(positions, label=f'Simulation {i+1}')

plt.xlabel('Time (steps)')
plt.ylabel('Position')
plt.title('1D Random Walk with p=0.85 (Biased to Right) - 5 Simulations')
plt.legend()
plt.show()

# Calculate mean and standard deviation of the final positions
mean_final = np.mean(final_positions)
std_final = np.std(final_positions)

print("Final positions:", final_positions)
print("Mean final position:", mean_final)
print("Standard deviation of final positions:", std_final)



"""**Question 2: Comparing 1D Random Walks with and without Drift**   
Suppose two particles perform 1D random walks starting from position 0:   
* *Particle A*: Moves with a drift, i.e., p=0.7 (70% chance to move right).
* *Particle B*: Moves without drift, i.e., p=0.5(equal probability both sides).   

**Instructions:**
1. Write a Python program to simulate 1000 steps for each particle.
2. Plot both random walks on the same graph with:  
o Time on the x-axis.
o Position on the y-axis.
o Different colors for each particle.
3. Calculate and display:
o The mean and standard deviation of the final position after 1000 steps. 4. Interpret your answer

"""

def simulate_1d_random_walk_particle(n_steps=1000, p=0.5):
    steps = np.where(np.random.rand(n_steps) < p, 1, -1)
    positions = np.cumsum(steps)
    positions = np.insert(positions, 0, 0)
    return positions

# Simulate for Particle A (p=0.7) and Particle B (p=0.5)
positions_A = simulate_1d_random_walk_particle(n_steps=1000, p=0.7)
positions_B = simulate_1d_random_walk_particle(n_steps=1000, p=0.5)

plt.figure(figsize=(10, 6))
plt.plot(positions_A, label='Particle A (Drift, p=0.7)', color='blue')
plt.plot(positions_B, label='Particle B (No drift, p=0.5)', color='red')
plt.xlabel('Time (steps)')
plt.ylabel('Position')
plt.title('Comparison of 1D Random Walks: With Drift vs Without Drift')
plt.legend()
plt.show()

# Calculate mean and std for final positions from multiple simulations (if desired, here just one example)
final_A = positions_A[-1]
final_B = positions_B[-1]
print("Particle A final position:", final_A)
print("Particle B final position:", final_B)



"""**Question 3: Simulating a 2D Random Walk (Unbiased)**  
A mosquito trapped in a square grid moves randomly:   
∙ Up, Down, Left, or Right with equal probability (25%) in each direction. The mosquito starts at coordinate (0,0).   

**Instructions:**  
1. Write a Python program to simulate a 2D random walk for 500 steps.
2. Plot the path of the mosquito (X vs Y) using a scatter plot or line plot.
3. Calculate and display:
o The final position after 500 steps.
o The total distance from the origin after 500 steps.
4. Run the simulation 10 times and calculate:  
o The average distance from the origin after 500 steps.
o The standard deviation of the distance.
5. Interpret your answer

"""

